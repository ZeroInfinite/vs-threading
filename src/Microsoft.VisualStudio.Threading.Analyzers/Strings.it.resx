<?xml version="1.0" encoding="utf-8"?>
<root>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AwaitXInstead" xml:space="preserve">
    <value>In alternativa, usare await {0}</value>
    <comment>"await" is a C# keyword and should not be translated.
{0} is a method name.</comment>
  </data>
  <data name="UseAwaitInstead" xml:space="preserve">
    <value>In alternativa, usare await</value>
    <comment>"await" is a C# keyword and should not be translated.</comment>
  </data>
  <data name="VSTHRD002_MessageFormat" xml:space="preserve">
    <value>L'attesa in modalità sincrona di attività o awaiter può causare deadlock. In alternativa, usare JoinableTaskFactory.Run.</value>
    <comment>"await" is a C# keyword and should not be translated.</comment>
  </data>
  <data name="VSTHRD002_Title" xml:space="preserve">
    <value>Evita attese sincrone problematiche</value>
  </data>
  <data name="VSTHRD010_MessageFormat" xml:space="preserve">
    <value>Il servizio "{0}" di Visual Studio non deve essere usato sul thread principale in modo esplicito.
Chiamare prima ThreadHelper.ThrowIfNotOnUIThread() o await JoinableTaskFactory.SwitchToMainThreadAsync().</value>
  </data>
  <data name="VSTHRD010_Title" xml:space="preserve">
    <value>Usa i servizi di Visual Studio dal thread dell'interfaccia utente</value>
  </data>
  <data name="VSTHRD100_MessageFormat" xml:space="preserve">
    <value>Evitare metodi "async void" perché tutte le eccezioni non gestite dal metodo causeranno l'arresto anomalo del processo.</value>
    <comment>"async void" is a pair of C# keywords. Do not translate them.</comment>
  </data>
  <data name="VSTHRD100_Title" xml:space="preserve">
    <value>Evita metodi asincroni void</value>
    <comment>"async void" is a pair of C# keywords. Do not translate them.</comment>
  </data>
  <data name="VSTHRD101_MessageFormat" xml:space="preserve">
    <value>Evitare di usare espressioni lambda asincrone per un tipo di delegato che restituisce void, perché tutte le eccezioni non gestite dal delegato causeranno l'arresto anomalo del processo.</value>
    <comment>"void" is a C# keyword and should not be translated.</comment>
  </data>
  <data name="VSTHRD101_Title" xml:space="preserve">
    <value>Evita delegati asincroni non supportati</value>
  </data>
  <data name="VSTHRD106_MessageFormat" xml:space="preserve">
    <value>I delegati di AsyncEventHandler devono essere richiamati tramite il metodo di estensione "TplExtensions.InvokeAsync()" definito nell'assembly Microsoft.VisualStudio.Threading.</value>
  </data>
  <data name="VSTHRD106_Title" xml:space="preserve">
    <value>Usa InvokeAsync per generare eventi asincroni</value>
  </data>
  <data name="VSTHRD003_MessageFormat" xml:space="preserve">
    <value>La chiamata di await su un elemento Task all'interno di un elemento JoinableTaskFactory.Run quando Task è inizializzato all'esterno del delegato può causare possibili deadlock.
Per evitare il problema, assicurarsi che Task venga inizializzato all'interno del delegato oppure usare JoinableTask invece di Task.</value>
  </data>
  <data name="VSTHRD003_Title" xml:space="preserve">
    <value>Evita l'uso di await Task non joinable in contesti di join</value>
  </data>
  <data name="VSTHRD011_MessageFormat" xml:space="preserve">
    <value>Lazy&lt;Task&lt;T&gt;&gt;.Value può causare deadlock.
In alternativa, usare AsyncLazy&lt;T&gt;.</value>
  </data>
  <data name="VSTHRD011_Title" xml:space="preserve">
    <value>Evitare di usare Lazy&lt;T&gt; in cui T è un elemento Task&lt;T2&gt;</value>
  </data>
  <data name="VSTHRD103_MessageFormat" xml:space="preserve">
    <value>{0} si blocca in modalità sincrona. In alternativa, usare await {1}.</value>
  </data>
  <data name="VSTHRD103_MessageFormat_UseAwaitInstead" xml:space="preserve">
    <value>{0} si blocca in modalità sincrona. In alternativa, usare await.</value>
  </data>
  <data name="VSTHRD103_Title" xml:space="preserve">
    <value>Chiama metodi asincroni se il metodo è asincrono</value>
  </data>
  <data name="VSTHRD102_MessageFormat" xml:space="preserve">
    <value>Limita l'uso di chiamate a metodi con blocco asincrono, come JoinableTaskFactory.Run o Task.Result, a membri di punti di ingresso pubblici in cui è necessario essere sincroni. Se vengono usate per membri interni, è possibile che vengano aggiunti frame sincroni non necessari tra frame asincroni e questo può causare l'esaurimento del pool di thread.</value>
  </data>
  <data name="VSTHRD102_Title" xml:space="preserve">
    <value>Implementa la logica interna in modalità asincrona</value>
  </data>
  <data name="VSTHRD200_CodeFix_Title" xml:space="preserve">
    <value>Rinomina in {0}</value>
    <comment>{0} is a method name.</comment>
  </data>
  <data name="VSTHRD200_MessageFormat" xml:space="preserve">
    <value>Usare il suffisso "Async" in nomi di metodi che restituiscono Task.</value>
  </data>
  <data name="VSTHRD200_Title" xml:space="preserve">
    <value>Usa suffisso "Async" per metodi asincroni</value>
  </data>
  <data name="VSTHRD100_CodeFix_Title" xml:space="preserve">
    <value>Cambia tipo restituito in Task</value>
    <comment>Task is a type name and should not be translated.</comment>
  </data>
  <data name="VSTHRD105_MessageFormat" xml:space="preserve">
    <value>Evitare gli overload di metodo che presuppongono TaskScheduler.Current. Usare un overload che accetta un elemento TaskScheduler e specificare TaskScheduler.Default (o qualsiasi altro elemento) in modo esplicito.</value>
  </data>
  <data name="VSTHRD105_Title" xml:space="preserve">
    <value>Evita overload di metodo che presuppongono TaskScheduler.Current</value>
  </data>
  <data name="VSTHRD012_MessageFormat" xml:space="preserve">
    <value>Specificare in questa chiamata un'istanza di JoinableTaskFactory o di un altro overload per evitare deadlock con il thread principale.</value>
  </data>
  <data name="VSTHRD012_Title" xml:space="preserve">
    <value>Specifica JoinableTaskFactory quando consentito</value>
  </data>
  <data name="VSTHRD104_MessageFormat" xml:space="preserve">
    <value>Esporre una versione asincrona di questo metodo che non applica il blocco asincrono. Semplificare quindi questo metodo in modo da chiamare il metodo asincrono in un delegato di JoinableTaskFactory.Run.</value>
  </data>
  <data name="VSTHRD104_Title" xml:space="preserve">
    <value>Offri metodi asincroni</value>
  </data>
  <data name="VSTHRD001_MessageFormat" xml:space="preserve">
    <value>Usare await JoinableTaskFactory.SwitchToMainThreadAsync() per passare al thread dell'interfaccia utente invece di usare API che possono causare deadlock o per le quali è necessario specificare una priorità.</value>
  </data>
  <data name="VSTHRD001_Title" xml:space="preserve">
    <value>Evita API legacy per il passaggio a thread</value>
    <comment>thread switching APIs refers to Visual Studio SDK or .NET methods that can be used to switch threads, but are obsolete and should be avoided.</comment>
  </data>
  <data name="VSTHRD107_MessageFormat" xml:space="preserve">
    <value>Manca l'operatore await per l'espressione "using".</value>
    <comment>"await" and "using" are C# keywords and should not be translated.</comment>
  </data>
  <data name="VSTHRD107_Title" xml:space="preserve">
    <value>await Task in espressione using</value>
    <comment>"await Task" is a C# compound term, and "using" is a C# keyword. These should not be translated.</comment>
  </data>
  <data name="VSTHRD107_CodeFix_Title" xml:space="preserve">
    <value>Espressione using await</value>
    <comment>"await" and "using" are C# keywords and should not be translated.</comment>
  </data>
</root>